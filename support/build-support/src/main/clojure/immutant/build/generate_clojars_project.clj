;; Copyright 2008-2012 Red Hat, Inc, and individual contributors.
;;
;; This is free software; you can redistribute it and/or modify it
;; under the terms of the GNU Lesser General Public License as
;; published by the Free Software Foundation; either version 2.1 of
;; the License, or (at your option) any later version.
;;
;; This software is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
;; Lesser General Public License for more details.
;;
;; You should have received a copy of the GNU Lesser General Public
;; License along with this software; if not, write to the Free
;; Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
;; 02110-1301 USA, or see the FSF site: http://www.fsf.org.

(ns immutant.build.generate-clojars-project
  (:require [clojure.java.io :as io]
            [clojure.string :as str])
  (:gen-class))


(def base-project
  {:url "http://immutant.org"
   :mailing-list {:name "Immutant users list"
                  :post "immutant-users@immutant.org"
                  :subscribe "immutant-users-subscribe@immutant.org"
                  :unsubscribe "immutant-users-unsubscribe@immutant.org"}
   :license {:name "GNU Lesser General Pulic License v2.1"
             :url "http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html"}
   :repositories [["projectodd-snapshots"
                   {:url "https://repository-projectodd.forge.cloudbees.com/snapshot"
                    :snapshots true}]
                  ["projectodd"
                   {:url "https://repository-projectodd.forge.cloudbees.com/release"
                    :snapshots false}]]})

(defn read-deps [file]
  (filter seq
          (map #(zipmap [:group :name :type :version :scope]
                        (rest (re-find #" +([^:]*):([^:]*):([^:]*):([^:]*):([^:]*)" %)))
               (clojure.string/split (slurp (io/file file)) #"\n"))))

(defn apply-exclusions [exclusions deps]
  (map (fn [[name version]]
         (if-let [ex (name exclusions)]
           [name version :exclusions ex]
           [name version]))
       deps))

(defn strip-module-suffix [name]
  (let [res (re-find #"(.*)-module" name)]
    (if (seq res)
      (second res)
      name)))

(defn process-project [dir project-name version description opts]
  (let [project-file (io/file dir "project.clj")
        short-project-name (strip-module-suffix project-name)
        deps (->> (read-deps "target/deps.txt")
                  ;; common has to be included here, but has to be 'provided' in the AS
                  (map (fn [d] (if (= "immutant-common" (:name d))
                                 (assoc d :scope "compile")
                                 d)))
                  (filter #(= "compile" (:scope %)))
                  ;; any module deps should instead be the public artifacts
                  (map (fn [d] (if-let [matches (re-find #"(immutant-.*)-module" (:name d))]
                                 (assoc d :name (last matches))
                                 d)))
                  (map (fn [d] [(symbol (:group d) (:name d))
                                (:version d)]))
                  (apply-exclusions (:exclude opts)))
        project (assoc base-project
                  :dependencies deps
                  :description description)]
    (println "Generating" (.getAbsolutePath project-file))
    (.mkdirs dir)
    (spit project-file
          (str ";; AUTOGENERATED - DO NOT EDIT\n"
               (pr-str `(~(symbol "defproject")
                         ~(symbol "org.immutant" short-project-name)
                         ~version
                         ~@(interleave (keys project) (vals project))))))
    (let [src-jar (io/file "target" (str project-name ".jar"))
          dest-jar (io/file dir (str short-project-name "-" version ".jar"))]
      (println "Copying" (.getAbsolutePath src-jar) "to" (.getAbsolutePath dest-jar))
      (io/copy src-jar dest-jar))))

(defn -main
  ([]
     ;; ffs maven - this allows us to setup an execution to call this in
     ;; the top-level pom, but only have it do work for poms that configure it
     (println "Not configured - skipping."))
  
  ([project-name version & args]
     (let [opts (apply hash-map (read-string (str "[" (str/join " " args) "]")))]
       (process-project
        (io/file (:target-dir opts "../../build/clojars/target") (strip-module-suffix project-name))
        (str/trim project-name)
        (str/trim version)
        (:description opts)
        opts))))
