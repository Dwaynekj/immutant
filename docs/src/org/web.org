#+TITLE:     Immutant Web

* Introduction

  Immutant allows applications to respond to web requests, typically
  via [[https://github.com/mmcgrana/ring][Ring]] handlers, but standard Java Servlets are supported, too.
  Each application can dynamically register any number of handlers,
  each with a unique context path. This allows you to have multiple
  Ring webapps that share the same deployment lifecycle.

  Immutant provides a session implementation that provides automatic data
  sharing across nodes in a cluster.

  In this chapter, the term /application/ refers to the full deployment itself,
  and /webapp/ refers to a particular web application based around a single 
  Ring handler as its entry point. For most applications, the two will be the
  same thing.

* Context Path
  :PROPERTIES:
  :CUSTOM_ID: web-context-path
  :END:

  The *context path* is a prefix on the path portion of a url that is used as
  a mechanism to route requests to the proper webapp when more than
  one webapp is being served by the same 'container'. If you are running only
  one webapp in a container (which is the typical strategy when deploying
  Clojure webapp via [[http://jetty.codehaus.org/jetty/][Jetty]]), the context path is the /root/ context - =/=.

  A properly constructed webapp needs no knowledge of the context path it is
  mounted under - the container is responsible for routing requests to the webapp
  and providing the webapp specific fragment of the url's path to it. This
  allows the webapp to be moved between contexts (or mounted at multiple
  contexts at once) without any modification to the webapp code itself.

** The Top-Level Context Path

   Every application deployed has a context path assigned on its behalf. Since
   handlers can be registered dynamically from anywhere during the lifecycle of
   the application, we reserve a context path for every application, whether that
   application registers web handlers or not.

   If no context path is provided, a default context path based on the name of
   the deployment is used. For example: an application deployed using a
   descriptor named =some-app.clj= will be given the context path
   =/some-app=. An application deployed using an archive named
   =some-other-app.ima= will be given the context path =/some-other-app=.
   See [[./deployment.html][Deployment]] for the details of deploying Clojure applications.

   You can override the default context path via the =:context-path= key in
   either in the deployment descriptor or the =:immutant= section of the 
   application's =project.clj= (see [[./initialization.html][Initialization]] for the details on setting 
   configuration values).

   This context path is considered the *top-level* context path - you have the
   option to bind a handler to a *sub-context* path that will be nested within
   the top-level path. The full context is stripped from the url's path before
   the request is processed, and the context and remaining path info are made
   available as part of the request map via the =:context= and =:path-info= 
   keys, respectively.

** The Sub-Context Path

   When you register a handler with Immutant, you can optionally provide a
   sub-context path for which the handler will be responsible. This sub-context
   path is appended to the top-level context path for purposes of routing
   requests to the handler, and allows you to have multiple webapps within
   a single application.

   See below for an [[#web-context-path-example][example]] demonstrating how the context path, sub-context path,
   and path info all work together.

* Virtual Host
  :PROPERTIES:
  :CUSTOM_ID: web-virtual-host
  :END:

  In addition to segmenting applications by context path, you can also segment
  by *virtual host*. To specify the virtual host (or hosts) for an application,
  set the =:virtual-host= key in either in the deployment descriptor or the 
  =:immutant= section of the application's =project.clj= (see [[./initialization.html][Initialization]] 
  for the details on setting configuration values). =:virtual-host= must be
  a string specifying a single host or a vector of strings specifying multiple
  hosts. Two applications with different virtual hosts can use the same 
  context path without collision.

* Registering Handlers

  To register a Ring handler, you simply call the [[./apidoc/immutant.web.html#var-start][immutant.web/start]], which
  takes one or two arguments, plus some options:

  - =sub-context-path= - the sub-context path within the application's context
    path where the handler should be attached. Optional - if omitted,
    "/" is assumed. Only one handler can be attached to any given 
    sub-context path - providing an already attached sub-context will
    replace the previously registered handler.
  - =handler= - the Ring handler to invoke when requests come in on the
    sub context path.

  The options are a subset of those provided by the popular [[https://github.com/weavejester/ring-server][ring-server]]:  

   | Option        | Default        | Description                         |
   |---------------+----------------+-------------------------------------|
   |               | <c>            | <35>                                |
   | :init         | nil            | A function called immediately after the handler is mounted |
   | :destroy      | nil            | A function called immediately after the handler is stopped |
   | :stacktraces? | true in :dev   | Display stacktraces in browser when exception is thrown |
   | :auto-reload? | true in :dev   | Automatically reload source files   |
   | :reload-paths | all dirs on CP | A seq of src paths to monitor for changes |

  Auto-reloading is enabled by default in development mode, which is
  determined by the presence of the =:dev= profile among the active
  ones in your Leiningen project. The [[https://github.com/immutant/lein-immutant][lein-immutant]] plugin activates
  =:dev= by default when you deploy your app, but you can override
  this using the =with-profile= higher-order task. You can also set
  the environment variable, =LEIN_NO_DEV=, to disable these defaults,
  regardless of whether =:dev= is active.

  Let's take a look at =start= in use. For the following example, assume
  the application has a top-level context path of =/my-app=:

  #+begin_src clojure
    (ns my.ns
      (:require [immutant.web :as web]))
    
    ;; handle requests at the root sub-context (/).
    ;; this handler will receive any request that the app
    ;; receives at /my-app/* *except* for anything captured by another
    ;; sub-context.
    (web/start my-root-handler)
    
    ;; handle requests at the /somewhere sub-context.
    ;; this handler will receive any request that the app
    ;; receives at /my-app/somewhere/*.
    (web/start "/somewhere" my-other-handler)
    
    ;; If you want to see your changes immediately while in a REPL, be
    ;; sure to pass a var-quoted handler. You only need to explicitly
    ;; set :auto-reload? when not in development mode.
    (web/start #'your-handler :auto-reload? true)
  #+end_src

  You can deregister a registered handler at any time. Immutant will deregister
  any remaining handlers for you when your application is undeployed.

* Deregistering Handlers

  You can deregister a Ring handler via the [[./apidoc/immutant.web.html#var-stop][immutant.web/stop]] function,
  which takes zero or one arguments:

  - =sub-context-path= - the sub-context path within the application's context
    path where the handler was attached. Optional - if omitted, "/" is assumed.

  An example of using =stop=:

  #+begin_src clojure
    (ns my.ns
      (:require [immutant.web :as web]))
    
    ;; deregisters the handler attached to the root sub-context (/)
    (web/stop)
    
    ;; deregisters the handler attached to the /somewhere sub-context
    (web/stop "/somewhere")
  #+end_src

* Context/Sub-Context Path Example
  :PROPERTIES:
  :CUSTOM_ID: web-context-path-example
  :END:

  Now that we've introduced registering ring handlers, we can give an example
  that makes it clear how the context and sub-context paths work, and how 
  the path info gets set.

  First, we'll set the context path for the entire application in our 
  =project.clj=:
   
   #+begin_src clojure
     (defproject someapp "0.1.0-SNAPSHOT"
       :dependencies [[org.clojure/clojure "1.4.0"]]
       
       :immutant {:init someapp.core/start
                  :context-path "/foo"})
   #+end_src

   Now we'll register two ring handlers with different sub-contexts, both
   of which will be available under the parent context we set in =project.clj=:

   #+begin_src clojure
     (ns someapp.core
       (:require [immutant.web :as web]))
     
     (defn make-handler  [sub-context]
       (fn [{:keys [context path-info] :as request}]
         {:status 200
          :content-type "text/plain"
          :body (pr-str {:mounted-sub-context sub-context
                         :request-context context
                         :request-path-info path-info})}))
     
     (defn start []
       ;; responds to /foo/
       (web/start "/" (make-handler "/"))
       ;; responds to /foo/bar/
       (web/start "/bar" (make-handler "/bar")))
   #+end_src

   When we deploy the app to Immutant, we can see how it sets the =:context= and 
   =:path-info= keys in the request map:

   #+begin_src sh
     $ curl http://localhost:8080/foo/baz
     {:mounted-sub-context "/", :request-context "/foo", :request-path-info "/baz"}
     $ curl http://localhost:8080/foo/baz/sheep
     {:mounted-sub-context "/", :request-context "/foo", :request-path-info "/baz/sheep"}
     $ curl http://localhost:8080/foo/bar/baz
     {:mounted-sub-context "/bar", :request-context "/foo/bar", :request-path-info "/baz"}
     $ curl http://localhost:8080/foo/bar/baz/sheep
     {:mounted-sub-context "/bar", :request-context "/foo/bar", :request-path-info "/baz/sheep"}
     $ curl http://localhost:8080/foo/bar
     {:mounted-sub-context "/bar", :request-context "/foo/bar", :request-path-info "/"}
     $ curl http://localhost:8080/foo/
     {:mounted-sub-context "/", :request-context "/foo", :request-path-info "/"}
   #+end_src
  
* Sessions

  Immutant provides a session store that can be used with the
  [[https://github.com/mmcgrana/ring/blob/master/ring-core/src/ring/middleware/session.clj][Ring session middleware]] (and any other middleware that uses =ring.middleware.session=,
  like [[https://github.com/brentonashworth/sandbar][Sandbar]]). The Immutant session store uses the session provided by
  the underlying JBoss AS7 servlet container, which automatically replicates
  session data across a cluster. You create the store by calling 
  [[./apidoc/immutant.web.session.html#var-servlet-store][immutant.web.session/servlet-store]], and use it by passing it as the =:store=
  option to =ring.middleware.session/wrap-session=:

  #+begin_src clojure
    (ns my.ns
      (:require [ring.middleware.session :as ring-session]
                [immutant.web :as web]
                [immutant.web.session :as immutant-session]))
    
    (web/start
     (ring-session/wrap-session
      #'my-handler
      {:store (immutant-session/servlet-store)}))
  #+end_src

  *Note:* since this store is managed by the servlet container, the session cookie
  (=jsessionid= by default) is itself managed at the servlet level. Any options
  other than =:store= passed to =ring.middleware.session/wrap-session= (=:cookie-attrs=,
  =:cookie-name=, or =:root=) will therefore be ignored.

* Locating dirs within the application root

  When a web server is embedded within an application, it's fine to
  make assumptions about relative paths because the current working
  directory for both the app and the web server is the same. 

  But this is not the case for Immutant, or any app server, because
  multiple applications may be deployed on it simultaneously. The app
  server is a single process, with a single current working directory,
  and an application should not assume that the server's current
  directory matches its root.

  But certain libraries require actual filesystem paths to directories
  at runtime, so you need to be able to determine the path to the 
  application root. You can do so via the [[./apidoc/immutant.util.html#var-app-relative][immutant.util/app-relative]] 
  function.

** An example

  This won't work on Immutant because "src" is a relative path, and it
  will resolve relative to the server's working directory, not the
  application's:

  #+begin_src clojure
    (noir.server/load-views "src/my_project_name/views")
  #+end_src
  
  But this *will* work on Immutant, because it returns an absolute path:

  #+begin_src clojure
    (require '[immutant.util :as util])
    (noir.server/load-views (util/app-relative "src/my_project_name/views"))
  #+end_src

* Serving static resources

  Web applications often need to serve static resources such as
  images, stylesheets, or javascript files. Ideally, you would use
  [[https://github.com/ring-clojure/ring/wiki/Static-Resources][Ring middleware]] to accomplish this, but prior to Ring 1.2, those
  functions do not support applications mounted at a context path
  other than the root. So until 1.2 is released, you can use
  [[./apidoc/immutant.web.html#var-wrap-resource][immutant.web/wrap-resource]], which is a drop-in replacement for
  [[http://mmcgrana.github.com/ring/ring.middleware.resource.html#var-wrap-resource]].

  The recommended approach is to store your resources beneath
  =resources/public/= and then reference that path when adding the
  middleware: 

  #+begin_src clojure
    (immutant.web/wrap-resource app "public")
  #+end_src

  This works because the =resources/= directory is automatically added
  to the application's effective class path at deployment.

* Mounting Servlets instead of Ring handlers, i.e. Pedestal apps

  Though mounting a Ring handler at a particular [sub] context path
  will suffice for the majority of Clojure web apps, some may find it
  too limiting and require the full capabilities of the Java Servlet
  API. Of course, like any servlet container, you can always wrap your
  servlets up into a war file and deploy it to Immutant. But you don't
  have to. You can mount any servlet to a context path via the
  [[./apidoc/immutant.web.html#var-start-servlet][immutant.web/start-servlet]] function.

** Pedestal

   Pedestal is a brand-new Clojure web framework for building rich
   client applications requiring asynchronous processing, server-sent
   events, response streaming, etc. As such, its entry-point is not a
   simple Ring handler but a special servlet comprised of a stack of
   "interceptors". So to mount a Pedestal servlet when your Leiningen
   project is deployed to Immutant, you might put the following in
   your =immutant.init= namespace:

   #+begin_src clojure
     (ns immutant.init
       (:require [immutant.web             :as web]
                 [io.pedestal.service.http :as http]
                 [hello.service            :as service]))
     
     (web/start-servlet "/" (::http/servlet (http/create-servlet service/service)))
   #+end_src
   
   The =io.pedestal.service.http/create-servlet= function returns a
   map of many things, including the actual Servlet instance
   associated with the keyword, =::io.pedestal.service.http/servlet=.

   During development, you might alternatively mount the =dev/service=
   var similarly at a REPL after including =:immutant {:nrepl-port
   7888}= in your =project.clj= and deploying it to a running Immutant
   instance.

   NOTE: As of this writing, Pedestal route tables are not
   context-aware, so unless you deploy them to the root context, you
   must hard-code the context path in your routes.
