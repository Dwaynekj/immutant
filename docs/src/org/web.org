#+TITLE:     Immutant Web
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

* Introduction

  Immutant allows applications to respond to web requests via [[https://github.com/mmcgrana/ring][Ring]] handlers.
  Each application can dynamically register any number of handlers, each with
  a unique context path.

  Immutant provides a session implementation that provides automatic data
  sharing across nodes in a cluster.

* Context Path

  The *context path* is the prefix on the path portion of a url that is one method
  used to identify the application that should receive the request when more than
  on application is being served by the same 'container'. If you are running only
  one application in a container (which is the typical strategy when deploying
  Clojure web application via [[http://jetty.codehaus.org/jetty/][Jetty]]), the context path is the /root/ context - =/=.

  A properly constructed web handler needs no knowledge of the context path it is
  mounted under - the container is responsible for routing requests to the application
  and providing the application specific fragment of the url's path to it. This
  allows the application to be moved between contexts (or mounted at multiple
  contexts at once) without any modification to the application code itself.

** Per-Application Top-Level Context Path

   Every application deployed has a context path assigned on its behalf. Since
   handlers can be registered dynamically from anywhere during the lifecycle of
   the application, we reserve a context path for every application, whether it
   provides web handlers or not.

   If no context path is provided, a default context path based on the name of
   the deployment is used. For example: an application deployed using a
   descriptor named =some-app.clj= will be given the context path
   =/some-app=. An application deployed using an archive named
   =some-other-app.ima= will be given the context path =/some-other-app=.

   You can override the default context path via the =:context-path= key in
   either in the deployment descriptor or the application's =project.clj=.
   See [[./initialization.html][Initialization]] for the details on setting configuration values,
   and [[./deployment.html][Deployment]] for the details of deploying Clojure applications.

   This context path is considered the *top-level* context path - you have the
   option to bind a handler to a *sub-context* path that is nested underneath
   the top-level path. The top-level path is stripped from the url's path before
   the request is processed. {{ exposed in the request, talk about other request
   keys here as well }}

** Sub-Context Paths
    
   {{ more to come }}

* Endpoints

* Sessions

* pwd
