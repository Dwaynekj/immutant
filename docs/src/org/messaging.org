#+TITLE:     Immutant Messaging
#+AUTHOR:    Jim Crossley
#+EMAIL:     jcrossley@redhat.com
#+DATE:      2012-01-06 Fri
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

* Introduction
** HornetQ

   Immutant encapsulates the JBoss [[http://www.jboss.org/hornetq/][HornetQ message broker]].
   It is automatically available to you, with no additional
   configuration required to start the messaging service. HornetQ
   supports clustered messaging, which provides load-balancing,
   failover, and other advanced features.

   The term "messaging" encompasses a large area of functionality.
   Messaging solutions are used to achieve loosely-coupled,
   asynchronous systems. The primary actors in a messaging-based
   system are messages, destinations, consumers, and producers. The
   broker mediates the relationships between the other actors.

* Destinations

  A destination represents a rendezvous point where messages are
  exchanged. A message may be sent to a destination by one actor,
  and received from the destination by another.

  There are two main types of destinations: *queues*
  (point-to-point) and *topics* (publish-subscribe). All
  destinations allow multiple actors to send messages. The type of
  destination determines how the message is routed. A queue delivers
  the message to a single recipient (possibly one of many
  candidates). And a topic delivers the message to all interested
  recipients.

** Deployment

   Queues and topics (collectively known as destinations) may be
   deployed with your application.

* Messages

  The unit of communication within a messaging system is a message.
  A message may either be simply a blob of octets, or it might have
  some higher-order, application-defined semantics. All messages
  include a set of headers, similar to email.

** Publishing

   Any component or client code that creates messages and gives them
   to the message broker for delivery is considered a
   /producer/. Generally speaking, the producer does not know the
   details of the destination.

** Receiving

   Any component that waits for messages to be delivered to it by
   the message broker is consider a /consumer/. Typically, a
   consumer is unaware of the producer or any other consumers.

